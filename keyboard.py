import logging
import os
from dotenv import load_dotenv
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import types, F
from aiogram import Bot
from handlers import router

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

run_chats = os.getenv("ROUTER_CHATS").split(",")

# ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /keyboard


@router.message(F.text == "/keyboard")
async def show_keyboard(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_keyboard())


@router.message(F.text == "/remove_keyboard")
async def remove_keyboard(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–∫—Ä—ã–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞!", reply_markup=ReplyKeyboardRemove())


# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤ –Ω–∞ –≤—á–µ—Ä–∞")]
        ],
        resize_keyboard=True,  # –£–º–µ–Ω—å—à–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        one_time_keyboard=False  # –û—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    )
    return keyboard


def format_route_info(data: dict) -> str:
    return (
        f"*üöç –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞:* `{data['number']}`\n"
        f"*üìç –ú–∞—Ä—à—Ä—É—Ç:* {data['name']}\n"
        f"*üë§ –í–æ–¥–∏—Ç–µ–ª—å:* {data['user']}\n"
        f"*üöó –ê–≤—Ç–æ:* {data['auto']}"
    )


async def send_routes(user_id, routes, bot: Bot):
    for route in routes:
        text = format_route_info(route)
        await bot.send_message(
            user_id,
            text=text,
            # –¢–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"details:{route['number']}")],
                    [InlineKeyboardButton(
                        text="–†–µ–π—Å –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", callback_data=f"late:{route['number']}")]

                ]
            )
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda call: call.data.split(':')[0] in ["details", "late"])
async def handle_inline_button(call: types.CallbackQuery, bot: Bot):
    user_id = call.message.chat.id
    action, number = call.data.split(':')
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} —Å –¥–µ–π—Å—Ç–≤–∏–µ–º {action}.")
    try:
        if action == "details":
            await bot.send_message(user_id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏")

        if action == "details":
            await bot.send_message(user_id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Ä–µ–π—Å –∑–∞–¥–µ–∂–∏–≤–∞–µ—Ç—Å—è")
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∫–Ω–æ–ø–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
