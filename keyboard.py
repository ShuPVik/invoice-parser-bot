import logging
import os
import asyncio
import datetime
from dotenv import load_dotenv
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import types, F
from aiogram import Bot
import pytz
from handlers import router, tz_novosibirsk

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

run_chats = os.getenv("ROUTER_CHATS").split(",")

# ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /keyboard


@router.message(F.text == "/keyboard")
async def show_keyboard(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_keyboard())


@router.message(F.text == "/remove_keyboard")
async def remove_keyboard(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–∫—Ä—ã–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞!", reply_markup=ReplyKeyboardRemove())


# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤ –Ω–∞ –≤—á–µ—Ä–∞")]
        ],
        resize_keyboard=True,  # –£–º–µ–Ω—å—à–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        one_time_keyboard=False  # –û—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    )
    return keyboard


def format_route_info(data: dict) -> str:
    return (
        f"*üöç –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞:* `{data['number']}`\n"
        f"*üìç –ú–∞—Ä—à—Ä—É—Ç:* {data['name']}\n"
        f"*üë§ –í–æ–¥–∏—Ç–µ–ª—å:* {data['user']}\n"
        f"*üöó –ê–≤—Ç–æ:* {data['auto']}"
    )


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ä–µ–π—Å–∞ (–º–æ–∂–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è)
routes_data = {
}


async def clear_routes_data():
    while True:
        now = datetime.datetime.now(pytz.utc).astimezone(
            tz_novosibirsk)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ
        # –°–ª–µ–¥—É—é—â–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤ 07:00
        next_run = now.replace(hour=7, minute=0, second=0, microsecond=0)
        if now >= next_run:  # –ï—Å–ª–∏ —É–∂–µ –ø–æ—Å–ª–µ 07:00, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            next_run += datetime.timedelta(days=1)

        wait_time = (next_run - now).total_seconds()  # –í—Ä–µ–º—è –¥–æ –æ—á–∏—Å—Ç–∫–∏

        logger.info(
            f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ 07:00 –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞ ({next_run}). –û—Å—Ç–∞–ª–æ—Å—å {wait_time} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(wait_time)

        routes_data.clear()
        logger.info("üöÆ –î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã!")


async def send_routes(user_id, routes, bot: Bot):
    for route in routes:
        text = format_route_info(route)
        routes_data[f'{route['number']}'] = text
        await bot.send_message(
            user_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üìã –î–µ—Ç–∞–ª–∏", callback_data=f"details:{route['number']}")],
                    [InlineKeyboardButton(
                        text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –∑–∞–¥–µ—Ä–∂–∫–µ", callback_data=f"late:{route['number']}")]
                ]
            )
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫

@router.callback_query(lambda call: call.data.split(':')[0] in ["details", "late"])
async def handle_inline_button(call: types.CallbackQuery):
    user_id = call.message.chat.id
    action, number = call.data.split(':')  # –£–±—Ä–∞–ª–∏ text –∏–∑ callback_data
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} —Å –¥–µ–π—Å—Ç–≤–∏–µ–º {action}.")

    text = routes_data.get(number, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    try:
        if action == "details":
            await call.message.edit_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data=f"back:{number}")]
                ])
            )

        elif action == "late":
            await call.message.edit_text(
                text=f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ –∑–∞–¥–µ—Ä–∂–∫–µ —Ä–µ–π—Å–∞ {number}?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚úÖ –î–∞", callback_data=f"yes:{number}")],
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data=f"back:{number}")]
                ])
            )

        await call.answer()

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∫–Ω–æ–ø–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda call: call.data.split(':')[0] in ["yes", "no", "back"])
async def handle_yes_no_button(call: types.CallbackQuery):
    user_id = call.message.chat.id
    action, number = call.data.split(':')
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} —Å –¥–µ–π—Å—Ç–≤–∏–µ–º {action}.")
    try:
        if action == "yes":
            await call.message.edit_text(text="–£–≤–µ–¥–æ–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        elif action == "back":
            await call.message.edit_text(
                text=f"üöå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ {number}.{routes_data[number]}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üìã –î–µ—Ç–∞–ª–∏", callback_data=f"details:{number}")],
                    [InlineKeyboardButton(
                        text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –∑–∞–¥–µ—Ä–∂–∫–µ", callback_data=f"late:{number}")]
                ])
            )

        await call.answer()
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∫–Ω–æ–ø–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
